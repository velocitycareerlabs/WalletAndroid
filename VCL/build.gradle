plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'signing'
}

ext {
    publishCode = 169
    publishVersion = "2.8.1"
    publishArtifactId = "vcl"
    publishGroupId = "io.velocitycareerlabs"
}

group = publishGroupId
version = publishVersion

android {
    namespace = publishGroupId
    compileSdk = 36

    defaultConfig {
        minSdk = 24
        targetSdk = 36
        versionCode = publishCode
        versionName = version
        consumerProguardFiles("consumer-rules.pro")
        buildConfigField "String", "VERSION_NAME", "\"${versionName}\""
        buildConfigField "int", "VERSION_CODE", "${versionCode}"
    }

    buildTypes {
        debug {
            minifyEnabled = false
            shrinkResources = false
        }
        rc {
            initWith(debug)
            buildConfigField "String", "VERSION_NAME", "\"${defaultConfig.versionName}-rc\""
            buildConfigField "int", "VERSION_CODE", "${defaultConfig.versionCode}"
        }
        release {
            initWith(debug)
            buildConfigField "String", "VERSION_NAME", "\"${defaultConfig.versionName}\""
            buildConfigField "int", "VERSION_CODE", "${defaultConfig.versionCode}"
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        buildConfig = true
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
    }

    libraryVariants.configureEach { variant ->
        variant.outputs.all {
            if (variant.name == "release") {
                outputFileName = "${publishArtifactId}-${publishVersion}.aar"
            } else if (variant.name == "rc") {
                outputFileName = "${publishArtifactId}-${publishVersion}-rc.aar"
            }
        }
    }
}

apply from: 'publish.gradle'

repositories {
    google()
    mavenCentral()
    mavenLocal()
}

// === Artifact Tasks ===
tasks.register("generateSourcesJar", Jar) {
    group = "assemble"
    archiveClassifier.set("sources")
    archiveBaseName.set(publishArtifactId.toLowerCase())
    from(android.sourceSets.main.java.srcDirs + android.sourceSets.main.kotlin.srcDirs)
}

tasks.register("generateJavadocJar", Jar) {
    group = "assemble"
    archiveClassifier.set("javadoc")
    archiveBaseName.set(publishArtifactId.toLowerCase())
    doFirst {
        def dummyDir = file("${layout.buildDirectory.get()}/empty-javadoc")
        dummyDir.mkdirs()
        def dummyJava = new File(dummyDir, "placeholder.java")
        if (!dummyJava.exists()) dummyJava.text = "/** Placeholder for javadoc */"
        from(dummyDir)
    }
}

tasks.register("generateSourcesAndJavadocJar") {
    group = "assemble"
    description = "Generates sources.jar and javadoc.jar"
    dependsOn("generateSourcesJar", "generateJavadocJar")
}

tasks.register("assembleAllRelease") {
    group = "assemble"
    description = "Generates AAR, sources.jar and javadoc.jar for release"
    dependsOn("assembleRelease", "generateSourcesAndJavadocJar")
}

tasks.register("assembleAllRc") {
    group = "assemble"
    description = "Generates AAR, sources.jar and javadoc.jar for rc"
    dependsOn("assembleRc", "generateSourcesAndJavadocJar")
}

tasks.register("verifyExpectedArtifactsExist") {
    group = "verification"
    description = "Prints the contents of key artifact directories"
    doLast {
        def printDirContents = { title, dirPath ->
            println "üìÇ Contents of ${dirPath}/"
            def dir = file(dirPath)
            if (dir.exists() && dir.isDirectory()) {
                dir.listFiles()?.each { println " - ${it.name}" }
            } else {
                println "‚ùå Directory does not exist: ${dirPath}"
            }
        }

        printDirContents("AAR", "build/outputs/aar")
        printDirContents("LIBS", "build/libs")
    }
}

tasks.register("stageArtifacts", Copy) {
    def mavenPath = "${publishGroupId.replace('.', '/')}/${publishArtifactId}/${publishVersion}/"
    from("${layout.buildDirectory.get()}/outputs/aar") {
        include("**/*.aar")
    }
    from("${layout.buildDirectory.get()}/libs") {
        include("**/*.jar")
    }
    into("target/staging-deploy/${mavenPath}")
}

dependencies {
    implementation 'androidx.core:core-ktx:1.17.0'

    implementation 'com.nimbusds:nimbus-jose-jwt:10.5'
    implementation "androidx.security:security-crypto:1.1.0"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.7.0'
    testImplementation 'org.robolectric:robolectric:4.16'

    testImplementation 'io.mockk:mockk:1.14.6'

    testImplementation "org.mockito:mockito-inline:5.2.0"
    // Required -- JSON framework
    testImplementation 'org.json:json:20250517'
    // json assert
    testImplementation 'org.skyscreamer:jsonassert:1.5.3'

    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
}