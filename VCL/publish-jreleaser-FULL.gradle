apply from: 'load-maven-keys.gradle'

// === Early Exit if Not a JReleaser Task ===
def isPublishTask = gradle.startParameter.taskNames.any { it.toLowerCase().contains("jreleaser") }
if (!isPublishTask) {
    logger.lifecycle("🟡 Skipping JReleaser config: not a jreleaser-related task.")
    return
}

// === Validate Required Secrets ===
def requiredSecrets = [
        mavenCentralTokenUsername,
        mavenCentralTokenPassword,
        mavenCentralSigningGpgPublicKey,
        mavenCentralSigningGpgPrivateKey,
        mavenCentralSigningPassword
]
if (requiredSecrets.any { it?.trim()?.isEmpty() }) {
    throw new GradleException("❌ Missing required Maven Central credentials or signing keys.")
}

// === Resolve Metadata ===
def resolvedVersion = project.version.toString()
def artifactBase = "${publishArtifactId.toLowerCase()}-$resolvedVersion"
def isDryRun = project.hasProperty("dryrun") && project.property("dryrun").toString().toBoolean()

if (isDryRun) {
    logger.lifecycle("ℹ️ JReleaser dry-run mode ENABLED")
}

// === JReleaser Configuration ===
jreleaser {
    enabled.set(true)

    project {
        name = publishArtifactId
        version.set(resolvedVersion)
        description = 'Velocity Career Labs Android SDK consumer app.'
        website = 'https://github.com/velocitycareerlabs/WalletAndroid'
        authors = ['Michael Avoyan']
        license = 'Apache-2.0'
        tags = ['android', 'sdk', 'aar', 'velocity', 'vcl']
    }

    release {
        github {
            repoOwner = 'velocitycareerlabs'
            name = 'WalletAndroid'
            tagName.set("release-$resolvedVersion")
            releaseName.set(resolvedVersion)
            prerelease.enabled.set(resolvedVersion.contains("rc"))
            sign = true
        }
    }

    signing {
        active = 'ALWAYS'
        mode = 'MEMORY'
        armored = true
        verify = false
        publicKey = mavenCentralSigningGpgPublicKey
        secretKey = mavenCentralSigningGpgPrivateKey
        passphrase = mavenCentralSigningPassword
        files = true
        artifacts = true
        checksums = true
    }

    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    username = mavenCentralTokenUsername
                    password = mavenCentralTokenPassword
                    verifyPom = false
                    applyMavenCentralRules = false
                }
            }
        }
    }

    assemble {
        enabled = false
    }

    distributions {
        vcl {
            active = 'ALWAYS'
            artifact { path = file("$buildDir/outputs/aar/${artifactBase}.aar") }
            artifact { path = file("$buildDir/libs/${artifactBase}-sources.jar") }
            artifact { path = file("$buildDir/libs/${artifactBase}-javadoc.jar") }
        }
    }
}

// === Publishing Task Aliases ===
//tasks.register("jreleaserPublishRelease") {
//    group = "publishing"
//    description = "Runs jreleaserFullRelease for the release build"
//    dependsOn("assembleAllRelease")
//    doFirst {
//        project.ext.set("dryrun", false)
//    }
//    finalizedBy("jreleaserFullRelease")
//}
//
//tasks.register("jreleaserPublishRc") {
//    group = "publishing"
//    description = "Runs jreleaserFullRelease for the RC build"
//    dependsOn("assembleAllRc")
//    doFirst {
//        project.ext.set("dryrun", false)
//    }
//    finalizedBy("jreleaserFullRelease")
//}
//
//tasks.register("jreleaserPublishDry") {
//    group = "publishing"
//    description = "Dry-run JReleaser publish (no deployment)"
//    dependsOn("assembleAllRelease")
//    doFirst {
//        project.ext.set("dryrun", true)
//    }
//    finalizedBy("jreleaserFullRelease")
//}

// Safe configuration block (Gradle 8+)
gradle.projectsEvaluated {
    if (project.plugins.hasPlugin('org.jreleaser')) {
        tasks.matching { it.name.startsWith("jreleaser") }.configureEach { task ->
            if (task.hasProperty("dryrun")) task.setProperty("dryrun", isDryRun)
            if (task.hasProperty("gitRootSearch")) task.setProperty("gitRootSearch", true)
            if (task.hasProperty("strict")) task.setProperty("strict", true)
        }
    }
}