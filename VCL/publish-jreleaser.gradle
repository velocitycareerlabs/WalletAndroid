apply from: 'load-maven-keys.gradle'

// Only apply when running jreleaser-related tasks
def isPublishTask = gradle.startParameter.taskNames.any { it.toLowerCase().contains("jreleaser") }
if (!isPublishTask) {
    logger.lifecycle("🟡 Skipping JReleaser config: not a jreleaser-related task.")
    return
}

// Ensure required Maven Central keys are defined
def requiredSecrets = [
        mavenCentralTokenUsername,
        mavenCentralTokenPassword,
        mavenCentralSigningGpgPublicKey,
        mavenCentralSigningGpgPrivateKey,
        mavenCentralSigningPassword
]
if (requiredSecrets.any { it == null || it.trim().isEmpty() }) {
    throw new GradleException("❌ Missing required Maven Central credentials or signing keys.")
}

// Resolve version and artifact base name
def resolvedVersionProvider = providers.gradleProperty("jreleaserVersionOverride")
        .orElse(providers.provider { publishVersion })
def artifactBaseProvider = resolvedVersionProvider.map { version -> "${publishArtifactId}-$version" }

// Optional dry run mode from extra properties
def isDryRun = project.hasProperty("dryrun") && project.property("dryrun").toString().toBoolean()
if (isDryRun) {
    logger.lifecycle("ℹ️ JReleaser dry-run mode ENABLED")
}

jreleaser {
    enabled = true

    project {
        name = 'vcl'
        version.set(resolvedVersionProvider)
        description = 'Velocity Career Labs Android SDK consumer app.'
        website = 'https://github.com/velocitycareerlabs/WalletAndroid'
        authors = ['Michael Avoyán']
        license = 'Apache-2.0'
        inceptionYear = '2024'
        tags = ['android', 'sdk', 'aar', 'velocity', 'vcl']
    }

    release {
        github {
            repoOwner = 'velocitycareerlabs'
            name = 'WalletAndroid'
            tagName.set(resolvedVersionProvider.map { "release-$it" })
            releaseName.set(resolvedVersionProvider)
            prerelease.enabled.set(resolvedVersionProvider.map { it.contains("rc") })
            sign = true
        }
    }

    signing {
        active = 'ALWAYS'
        mode = 'MEMORY'
        armored = true
        verify = false
        publicKey = mavenCentralSigningGpgPublicKey
        secretKey = mavenCentralSigningGpgPrivateKey
        passphrase = mavenCentralSigningPassword
        files = true
        artifacts = true
        checksums = true
    }

    deploy {
        maven {
            mavenCentral {
                app {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    authorization = 'BEARER'
                    username = mavenCentralTokenUsername
                    password = mavenCentralTokenPassword
                    namespace = 'velocitycareerlabs'

                    artifactOverride {
                        groupId = publishGroupId
                        artifactId = publishArtifactId
                        sourceJar = true
                        javadocJar = true
                        verifyPom = false
                    }

                    applyMavenCentralRules = false
                    sign = true
                    checksums = true
                    sourceJar = true
                    javadocJar = true
                    verifyPom = false
                }
            }
        }
    }

    assemble {
        enabled = false
    }

    distributions {
        vcl {
            active = 'ALWAYS'
            artifact {
                path = file("${buildDir}/outputs/aar/${artifactBaseProvider.get()}.aar")
            }
            artifact {
                path = file("${buildDir}/libs/${artifactBaseProvider.get()}-sources.jar")
            }
            artifact {
                path = file("${buildDir}/libs/${artifactBaseProvider.get()}-javadoc.jar")
            }
        }
    }
}

// ========== TASK ALIASES ==========
tasks.register("jreleaserPublishRelease") {
    group = "publishing"
    description = "Runs jreleaserFullRelease for the release build"
    dependsOn("assembleRelease", "generateSourcesJar", "generateJavadocJar")
    doFirst {
        project.extensions.extraProperties.set("jreleaserVersionOverride", publishVersion)
    }
    finalizedBy("jreleaserFullRelease")
}

tasks.register("jreleaserPublishRc") {
    group = "publishing"
    description = "Runs jreleaserFullRelease for RC build"
    dependsOn("assembleRc", "generateSourcesJar", "generateJavadocJar")
    doFirst {
        def rcVersion = "${publishVersion}-rc"
        project.extensions.extraProperties.set("jreleaserVersionOverride", rcVersion)
    }
    finalizedBy("jreleaserFullRelease")
}

tasks.register("jreleaserPublishDry") {
    group = "publishing"
    description = "Dry-run JReleaser publish (no deployment)"
    dependsOn("assembleRelease", "generateSourcesJar", "generateJavadocJar")
    doFirst {
        project.extensions.extraProperties.set("jreleaserVersionOverride", publishVersion)
        project.extensions.extraProperties.set("dryrun", true)
    }
    finalizedBy("jreleaserFullRelease")
}

// ========== GRADLE 8.x+ STRICT CONFIGURATION ==========
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":${project.name}:jreleaserFullRelease")) {
        tasks.named("jreleaserFullRelease").configure { task ->
            task.dryrun.set(isDryRun)
            task.gitRootSearch.set(true)
            task.strict.set(true)
        }
    }
}