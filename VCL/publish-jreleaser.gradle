import org.gradle.api.tasks.bundling.Jar

apply from: 'load-maven-keys.gradle'

// Skip if not a publish task
def isPublishTask = gradle.startParameter.taskNames.any { it.toLowerCase().contains("jreleaser") }
if (!isPublishTask) {
    logger.lifecycle("ðŸŸ¡ Skipping JReleaser config: not a jreleaser-related task.")
    return
}

apply plugin: 'org.jreleaser'

// Lazily resolve version at execution time
def resolvedVersionProvider = providers.gradleProperty("jreleaserVersionOverride")
        .orElse(providers.provider { publishVersion })

def resolvedVersion = resolvedVersionProvider.get()
def artifactBase = "${publishArtifactId}-${resolvedVersion}"

jreleaser {
    enabled = true

    project {
        name = 'vcl'
        version.set(resolvedVersionProvider)
        description = 'Velocity Career Labs Android SDK consumer app.'
        website = 'https://github.com/velocitycareerlabs/WalletAndroid'
        authors = ['Michael AvoyÃ¡n']
        license = 'Apache-2.0'
        inceptionYear = '2024'
        tags = ['android', 'sdk', 'aar', 'velocity', 'career']
    }

    release {
        github {
            repoOwner = 'velocitycareerlabs'
            name = 'WalletAndroid'
            tagName.set(providers.provider { "release-${resolvedVersionProvider.get()}" })
            releaseName.set(resolvedVersionProvider)
            prerelease.enabled = resolvedVersion.contains("rc")
            sign = true
        }
    }

    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'MEMORY'
        publicKey = mavenCentralSigningGpgPublicKey
        secretKey = mavenCentralSigningGpgPrivateKey
        passphrase = mavenCentralSigningPassword
    }

    deploy {
        maven {
            mavenCentral {
                active = 'ALWAYS'
                url = 'https://central.sonatype.com/api/v1/publisher'
                stagingRepository = ''
                username = mavenCentralTokenUsername
                password = mavenCentralTokenPassword

                coordinates {
                    groupId = publishGroupId
                    artifactId = publishArtifactId
                    version.set(resolvedVersionProvider)
                }

                files = [
                        [path: "${buildDir}/outputs/aar/${artifactBase}.aar",     type: "aar"],
                        [path: "${buildDir}/libs/${artifactBase}-sources.jar",    type: "jar", classifier: "sources"],
                        [path: "${buildDir}/libs/${artifactBase}-javadoc.jar",    type: "jar", classifier: "javadoc"]
                ]

                pom {
                    name = 'vcl'
                    packaging = 'aar'
                    description = 'Velocity Career Labs Android SDK'
                    url = 'https://github.com/velocitycareerlabs/WalletAndroid'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'velocitycareerlabs'
                            name = 'Michael AvoyÃ¡n'
                            email = 'michael.avoyan@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/velocitycareerlabs/WalletAndroid.git'
                        developerConnection = 'scm:git:ssh://[emailÂ protected]/velocitycareerlabs/WalletAndroid'
                        url = 'https://github.com/velocitycareerlabs/WalletAndroid'
                    }
                }
            }
        }
    }

    assemble {
        enabled = false
    }
}

// Task: publish RELEASE version
tasks.register("jreleaserRelease") {
    group = "publishing"
    description = "Publishes release AAR using JReleaser"
    dependsOn("assembleRelease", "generateSourcesJar", "generateJavadocJar")
    doFirst {
        logger.lifecycle("ðŸ“¦ Releasing version: ${publishVersion}")
        project.extensions.extraProperties.set("jreleaserVersionOverride", publishVersion)
    }
    doLast {
        jreleaser.fullRelease()
    }
}

// Task: publish RC version
tasks.register("jreleaserRc") {
    group = "publishing"
    description = "Publishes RC AAR using JReleaser"
    dependsOn("assembleRc", "generateSourcesJar", "generateJavadocJar")
    doFirst {
        def rcVersion = "${publishVersion}-rc"
        logger.lifecycle("ðŸ“¦ Releasing RC version: ${rcVersion}")
        project.extensions.extraProperties.set("jreleaserVersionOverride", rcVersion)
    }
    doLast {
        jreleaser.fullRelease()
    }
}