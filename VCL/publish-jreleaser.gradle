apply plugin: 'org.jreleaser'
apply from: 'load-maven-keys.gradle'

// Only apply JReleaser logic when publishing
def isPublishTask = gradle.startParameter.taskNames.any { it.toLowerCase().contains("jreleaser") }
if (!isPublishTask) {
    logger.lifecycle("🟡 Skipping JReleaser config: not a jreleaser-related task.")
    return
}

// Ensure all required credentials are available
def requiredSecrets = [
        mavenCentralTokenUsername,
        mavenCentralTokenPassword,
        mavenCentralSigningGpgPublicKey,
        mavenCentralSigningGpgPrivateKey,
        mavenCentralSigningPassword
]
if (requiredSecrets.any { it == null || it.trim().isEmpty() }) {
    throw new GradleException("❌ Missing required Maven Central credentials or signing keys.")
}

// Determine version dynamically
def resolvedVersionProvider = providers.gradleProperty("jreleaserVersionOverride")
        .orElse(providers.provider { publishVersion })
def artifactBaseProvider = resolvedVersionProvider.map { version -> "${publishArtifactId}-$version" }

jreleaser {
    enabled = true

    project {
        name = 'vcl'
        version.set(resolvedVersionProvider)
        description = 'Velocity Career Labs Android SDK consumer app.'
        website = 'https://github.com/velocitycareerlabs/WalletAndroid'
        authors = ['Michael Avoyán']
        license = 'Apache-2.0'
        inceptionYear = '2024'
        tags = ['android', 'sdk', 'aar', 'velocity', 'career']
    }

    release {
        github {
            repoOwner = 'velocitycareerlabs'
            name = 'WalletAndroid'
            tagName.set(resolvedVersionProvider.map { "release-$it" })
            releaseName.set(resolvedVersionProvider)
            prerelease.enabled.set(resolvedVersionProvider.map { it.contains("rc") })
            sign = true
        }
    }

    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'MEMORY'
        publicKey = mavenCentralSigningGpgPublicKey
        secretKey = mavenCentralSigningGpgPrivateKey
        passphrase = mavenCentralSigningPassword
    }

    deploy {
        maven {
            mavenCentral {
                app {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    username = mavenCentralTokenUsername
                    password = mavenCentralTokenPassword
                    namespace = 'velocitycareerlabs'

                    artifactOverride {
                        groupId = publishGroupId
                        artifactId = publishArtifactId
                        sourceJar = true
                        javadocJar = true
                    }

                    // Files injected after evaluation
                }
            }
        }
    }

    assemble {
        enabled = false
    }
}

// Attach files after evaluation
afterEvaluate {
    def artifactBase = artifactBaseProvider.get()
    jreleaser.deploy.maven.mavenCentral.app.files = [
            [path: "${buildDir}/outputs/aar/${artifactBase}.aar", type: "aar"],
            [path: "${buildDir}/libs/${artifactBase}-sources.jar", type: "jar", classifier: "sources"],
            [path: "${buildDir}/libs/${artifactBase}-javadoc.jar", type: "jar", classifier: "javadoc"]
    ]
}

// ========== TASKS ==========
tasks.register("jreleaserRelease") {
    group = "publishing"
    description = "Publishes release AAR using JReleaser"
    dependsOn("assembleRelease", "generateSourcesJar", "generateJavadocJar")
    doFirst {
        logger.lifecycle("📦 Releasing version: ${publishVersion}")
        project.extensions.extraProperties.set("jreleaserVersionOverride", publishVersion)
    }
    doLast {
        jreleaser.fullRelease()
    }
}

tasks.register("jreleaserRc") {
    group = "publishing"
    description = "Publishes RC AAR using JReleaser"
    dependsOn("assembleRc", "generateSourcesJar", "generateJavadocJar")
    doFirst {
        def rcVersion = "${publishVersion}-rc"
        logger.lifecycle("📦 Releasing RC version: ${rcVersion}")
        project.extensions.extraProperties.set("jreleaserVersionOverride", rcVersion)
    }
    doLast {
        jreleaser.fullRelease()
    }
}

tasks.register("jreleaserDryRun") {
    group = "publishing"
    description = "Runs JReleaser dry-run to validate setup"
    dependsOn("assembleRelease", "generateSourcesJar", "generateJavadocJar")
    doFirst {
        project.extensions.extraProperties.set("jreleaserVersionOverride", publishVersion)
    }
    doLast {
        jreleaser.dryRun()
    }
}