import java.text.SimpleDateFormat
import java.util.Base64

// === Detect CI & publishing context ===
def isCiBuild = System.getenv("CI") == "true"
def isPublishTask = gradle.startParameter.taskNames.any { it.toLowerCase().contains("publish") }

// === Skip this script unless it's a publish task ===
if (!isPublishTask) {
    println "\uD83D\uDFE1 Skipping publish-core.gradle: not a publishing task."
    return
}

def isPublishRc = gradle.startParameter.taskNames.contains("publishRc")
def isPublishRelease = gradle.startParameter.taskNames.contains("publishRelease")
project.ext.rcMode = isPublishRc

// === Load credentials ===
def propertiesFilePath = '/Volumes/Keybase/team/velocitycareers/mobile/android/maven2/maven2.properties'

static def loadProperties(String filePath) {
    def props = new Properties()
    def file = new File(filePath)
    if (file.exists()) {
        file.withInputStream { props.load(it) }
    }
    return props
}

def properties = loadProperties(propertiesFilePath)
if (properties.isEmpty() && !isCiBuild) {
    throw new GradleException("❌️ Local maven2.properties file not found at: ${propertiesFilePath}")
}

// === Load credentials
ext {
    mavenCentralTokenUsername        = System.getenv("MAVEN_CENTRAL_TOKEN_USERNAME")?.trim()        ?: properties.getProperty("mavenCentralTokenUsername")?.trim()
    mavenCentralTokenPassword        = System.getenv("MAVEN_CENTRAL_TOKEN_PASSWORD")?.trim()        ?: properties.getProperty("mavenCentralTokenPassword")?.trim()
    mavenCentralSigningKeyId         = System.getenv("MAVEN_CENTRAL_SIGNING_KEY_ID")?.trim()        ?: properties.getProperty("mavenCentralSigningKeyId")?.trim()
    mavenCentralSigningPassword      = System.getenv("MAVEN_CENTRAL_SIGNING_PASSWORD")?.trim()      ?: properties.getProperty("mavenCentralSigningPassword")?.trim()
    mavenCentralSigningPrivateKeyB64 = System.getenv("MAVEN_CENTRAL_PRIVATE_KEY_B64")?.trim()       ?: properties.getProperty("mavenCentralSigningPrivateKeyB64")?.trim()
}

// === Fail fast in CI if required credentials are missing ===
def envDesc = isCiBuild ? "CI" : "local"
println "ℹ️ Running in $envDesc environment."

def githubSecretsNames = [
        "MAVEN_CENTRAL_TOKEN_USERNAME",
        "MAVEN_CENTRAL_TOKEN_PASSWORD",
        "MAVEN_CENTRAL_SIGNING_KEY_ID",
        "MAVEN_CENTRAL_SIGNING_PASSWORD",
        "MAVEN_CENTRAL_PRIVATE_KEY_B64"
]

if (!isCiBuild) {
    githubSecretsNames = githubSecretsNames.collect { toCamelCase(it) }
}

static def toCamelCase(String input) {
    def parts = input.toLowerCase().split('_')
    parts[0] + parts.tail().collect { it.capitalize() }.join('')
}

[
        mavenCentralTokenUsername,
        mavenCentralTokenPassword,
        mavenCentralSigningKeyId,
        mavenCentralSigningPassword,
        mavenCentralSigningPrivateKeyB64
].eachWithIndex { val, idx ->
    if (!val) {
        def message = "❌️ Required publishing property '${githubSecretsNames[idx]}' is missing."
        if (isCiBuild) message += " Please check your GitHub Actions secrets."
        throw new GradleException(message)
    } else {
        println "✅ Found required property: ${githubSecretsNames[idx]}:\n$val"
    }
}

// === Calculate resolved version ===
def sanitizedVersion = project.version.toString().replace("-SNAPSHOT", "")
def resolvedVersion = project.ext.rcMode
        ? "${sanitizedVersion}-rc-${new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())}"
        : sanitizedVersion

// === Set artifact coordinates ===
def myArtifactId = project.findProperty("artifactId") ?: "vcl"
def myGroupId = project.findProperty("groupId") ?: "io.velocitycareerlabs"

// === Define output paths ===
def outputAar = layout.buildDirectory.file("outputs/aar/${project.name}-${project.ext.rcMode ? "rc" : "release"}.aar")
def finalAar = layout.buildDirectory.file("outputs/aar/${myArtifactId}-${resolvedVersion}.aar")

println "Configured build (initial):"
println " - rcMode: ${project.ext.rcMode}"
println " - buildType: ${project.ext.rcMode ? "rc" : "release"}"
println " - sanitizedVersion: ${sanitizedVersion}"
println " - resolvedVersion: ${resolvedVersion}"

// === Validate Assemble Task Exists
def assembleTaskName = { project.ext.rcMode ? "assembleRc" : "assembleRelease" }

afterEvaluate {
    if (!tasks.findByName(assembleTaskName())) {
        throw new GradleException("Expected task '${assembleTaskName()}' not found. Verify build flavors.")
    }

    // === Rename AAR ===
    tasks.register("renameAar") {
        dependsOn(assembleTaskName())

        doLast {
            def builtAar = outputAar.get().asFile
            def renamedAar = finalAar.get().asFile

            if (builtAar.exists()) {
                println "Renaming AAR: ${builtAar.name} → ${renamedAar.name}"
                builtAar.renameTo(renamedAar)
            } else {
                throw new GradleException("Expected AAR not found: ${builtAar}")
            }
        }
    }

    // === Publishing block ===
    publishing {
        publications {
            create("default", MavenPublication) {
                groupId = myGroupId
                artifactId = myArtifactId
                version = resolvedVersion

                artifact(finalAar) {
                    builtBy(tasks.named("renameAar"))
                }
                artifact(tasks.named("androidSourcesJar"))

                pom {
                    name.set(myArtifactId)
                    description.set("Velocity Career Labs Android library")
                    url.set("https://github.com/velocitycareerlabs/WalletAndroid")
                    licenses {
                        license {
                            name.set("Apache License 2.0")
                            url.set("https://github.com/velocitycareerlabs/WalletAndroid/blob/dev/VCL/LICENSE")
                        }
                    }
                    developers {
                        developer {
                            id.set("velocitycareerlabs")
                            name.set("Michael Avoyan")
                            email.set("michael.avoyan@velocitycareerlabs.com")
                        }
                    }
                    scm {
                        connection.set("scm:git:git://github.com/velocitycareerlabs/WalletAndroid.git")
                        developerConnection.set("scm:git:ssh://github.com/velocitycareerlabs/WalletAndroid.git")
                        url.set("https://github.com/velocitycareerlabs/WalletAndroid")
                    }
                }
            }
        }

        repositories {
            maven {
                name = "central"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = mavenCentralTokenUsername
                    password = mavenCentralTokenPassword
                }
            }
        }
    }

    // === Signing ===
    if (mavenCentralSigningPrivateKeyB64?.trim()) {
        println("✅ Configuring in-memory PGP signing")
        def decodedKey = new String(Base64.decoder.decode(mavenCentralSigningPrivateKeyB64), "UTF-8")

        signing {
            required {
                gradle.taskGraph.hasTask("publish") ||
                        gradle.taskGraph.hasTask("publishRc") ||
                        gradle.taskGraph.hasTask("publishRelease")
            }

            useInMemoryPgpKeys(
                    mavenCentralSigningKeyId,
                    decodedKey,
                    mavenCentralSigningPassword
            )

            sign(publishing.publications["default"])
        }
    } else {
        println("⚠️ Skipping signing: No PGP key configured")
    }

    // === Task dependencies ===
    tasks.named("publish").configure {
        dependsOn("renameAar")
    }

    tasks.named("generateMetadataFileForDefaultPublication") {
        dependsOn(tasks.named("androidSourcesJar"))
    }
}

// === Shared task registration helper ===
def registerPublishVariantTask = { String taskName, boolean rcFlag ->
    tasks.register(taskName) {
        group = "publishing"
        description = "Publish ${rcFlag ? "RC" : "stable"} version to Maven Central"

        doFirst {
            project.ext.rcMode = rcFlag
            println "Publishing ${rcFlag ? "RC" : "Release"} version (rcMode=${rcFlag}): ${resolvedVersion}"
        }

        dependsOn(assembleTaskName())
        finalizedBy("publish")
    }
}

// === Publishing Tasks ===
registerPublishVariantTask("publishRc", true)
registerPublishVariantTask("publishRelease", false)
