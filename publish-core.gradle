def propertiesFilePath = '/Volumes/Keybase/team/velocitycareers/mobile/android/maven/nexus.properties'
def propertiesFilePathAlternative = 'nexus.properties'

static def loadProperties(filePath) {
    def properties = new Properties()
    def file = new File(filePath)
    if (file.exists()) {
        file.withInputStream { stream ->
            properties.load(stream)
        }
    }
    return properties
}

def properties = loadProperties(propertiesFilePath)
if (properties.isEmpty()) {
    properties = loadProperties(propertiesFilePathAlternative)
}

if (properties.isEmpty()) {
    println "Properties file not found: $propertiesFilePath or $propertiesFilePathAlternative"
}

ext {
    signingKeyId = System.getenv("ANDROID_NEXUS_SIGNING_KEY_ID") ?: properties.getProperty("signingKeyId") ?: println("signingKeyId was NOT found")
    signingPassword = System.getenv("ANDROID_NEXUS_SIGNING_PASSWORD") ?: properties.getProperty("signingPassword") ?: println("signingPassword was NOT found")
    ossrhTokenUsername = System.getenv("ANDROID_NEXUS_OSSRH_TOKEN_USERNAME") ?: properties.getProperty("ossrhTokenUsername") ?: println("ossrhTokenUsername was NOT found")
    ossrhTokenPassword = System.getenv("ANDROID_NEXUS_OSSRH_TOKEN_PASSWORD") ?: properties.getProperty("ossrhTokenPassword") ?: println("ossrhTokenPassword was NOT found")
    sonatypeStagingProfileId = System.getenv("ANDROID_NEXUS_STAGING_PROFILE_ID") ?: properties.getProperty("stagingProfileId") ?: println("stagingProfileId was NOT found")
    signingPrivateKey = System.getenv("ANDROID_NEXUS_PRIVATE_KEY") ?: properties.getProperty("signingPrivateKey") ?: println("signingPrivateKey was NOT found")
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhTokenUsername
            password = ossrhTokenPassword
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

tasks.register('publishRelease') {
    dependsOn(':VCL:publishReleasePublicationToSonatypeRepository')
}

tasks.register('publishRc') {
    dependsOn(':VCL:publishRcPublicationToSonatypeRepository')
}