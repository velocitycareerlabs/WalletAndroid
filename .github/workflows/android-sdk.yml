name: WalletAndroid-SDK-Publish

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        type: choice
        options: [rc, prod]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      PACKAGE_TYPE: aar
      JAVA_VERSION: 17
      ARTIFACT_PATH: VCL/build/outputs
      RELEASE_TAG: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build AAR
        run: RELEASE_TAG=${{ env.RELEASE_TAG }} ./gradlew clean assemble${{ env.RELEASE_TAG }}

      - name: Build sources and javadoc jars
        run: ./gradlew sourcesJar javadocJar

      - name: List artifacts
        run: |
          ls -al ${{ env.ARTIFACT_PATH }}/${{ env.PACKAGE_TYPE }}/
          ls -al VCL/build/libs/

      - name: Validate artifacts
        run: |
          test -s ${{ env.ARTIFACT_PATH }}/${{ env.PACKAGE_TYPE }}/vcl-${{ env.RELEASE_TAG }}.aar || exit 1
          test -s VCL/build/libs/vcl-sources.jar || exit 1
          test -s VCL/build/libs/vcl-javadoc.jar || exit 1

      - name: üîç Extract and set release version
        run: |
          VERSION=$(./gradlew -q printVersion).${{ github.run_number }}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: üîß Decode and export GPG secrets
        run: |
          echo "Decoding GPG keys and exporting to environment..."

          echo "JRELEASER_GPG_SECRET_KEY<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY_B64 }}" | base64 --decode >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "JRELEASER_GPG_PUBLIC_KEY<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PUBLIC_KEY_B64 }}" | base64 --decode >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: üßö Confirm GPG key format
        run: |
          echo "üîí PRIVATE KEY preview:"
          echo "${{ env.JRELEASER_GPG_SECRET_KEY }}" | head -n 5
          echo "üîì PUBLIC KEY preview:"
          echo "${{ env.JRELEASER_GPG_PUBLIC_KEY }}" | head -n 5

      - name: üìÑ Prepare JReleaser config
        run: |
          cp .github/jreleaser.template.yml .github/jreleaser.yml
          sed -i "s|{{RELEASE_VERSION}}|${RELEASE_VERSION}|g" .github/jreleaser.yml
          sed -i "s|{{RELEASE_TAG}}|${RELEASE_TAG}|g" .github/jreleaser.yml

          if [ "$RELEASE_TAG" = "rc" ]; then
            sed -i "s|{{PRERELEASE}}|true|g" .github/jreleaser.yml
          else
            sed -i "s|{{PRERELEASE}}|false|g" .github/jreleaser.yml
          fi
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}

      - name: üóìÔ∏è Dump JReleaser config (for debug)
        run: cat .github/jreleaser.yml

      - name: üöÄ Release with JReleaser
        uses: jreleaser/release-action@v2
        with:
          version: 1.18.0
          arguments: full-release -P projectVersion=${{ env.RELEASE_VERSION }} --basedir . -c .github/jreleaser.yml
        env:
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_SIGNING_PASSWORD }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ env.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ env.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_TOKEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_TOKEN_USERNAME }}
          JRELEASER_TOKEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN_PASSWORD }}
          JRELEASER_NEXUS_STAGING_PROFILE_ID: ${{ secrets.ANDROID_NEXUS_STAGING_PROFILE_ID }}

      - name: Upload AAR
        uses: actions/upload-artifact@v4
        with:
          name: vcl-${{ env.RELEASE_TAG }}-${{ github.run_number }}
          path: ${{ env.ARTIFACT_PATH }}/${{ env.PACKAGE_TYPE }}
          if-no-files-found: error
          retention-days: 14

      - name: ‚úÖ Notify success
        if: success()
        run: echo "‚úÖ Android SDK published successfully."

      - name: ‚ùå Notify failure
        if: failure()
        run: echo "‚ùå Android SDK build or release failed."
