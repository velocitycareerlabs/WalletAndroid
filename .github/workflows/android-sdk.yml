name: WalletAndroid-SDK-Publish

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release version (e.g., 2.7.3)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        default: 'false'

jobs:
  release-android-sdk:
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ github.event.inputs.release_tag }}
      PRERELEASE: ${{ github.event.inputs.prerelease }}

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: 🛠️ Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: 🧪 Build AAR + Sources + Javadoc
        run: |
          ./gradlew clean :VCL:assembleRelease :VCL:generateSourcesJar :VCL:generateJavadocJar --stacktrace

      - name: 📂 Verify built artifacts
        run: |
          echo "🔍 AAR artifact:"
          ls -lh VCL/build/outputs/aar/
          echo "📦 Sources & Javadoc JARs:"
          ls -lh VCL/build/libs/

      - name: 🔐 Decode and export GPG keys
        shell: bash
        run: |
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY_B64 }}" | base64 --decode > private.gpg
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PUBLIC_KEY_B64 }}" | base64 --decode > public.gpg

          {
            echo 'JRELEASER_GPG_SECRET_KEY<<EOF'
            cat private.gpg
            echo 'EOF'
          } >> $GITHUB_ENV

          {
            echo 'JRELEASER_GPG_PUBLIC_KEY<<EOF'
            cat public.gpg
            echo 'EOF'
          } >> $GITHUB_ENV

      - name: 🧹 Clean up temporary GPG files
        run: |
          rm -f private.gpg public.gpg

      - name: 🛑 Fail if artifacts are missing
        run: |
          test -f VCL/build/outputs/aar/vcl-${{ env.RELEASE_VERSION }}.aar
          test -f VCL/build/libs/vcl-sources.jar
          test -f VCL/build/libs/vcl-javadoc.jar

      - name: 🚀 Run JReleaser full-release
        uses: jreleaser/release-action@v2
        with:
          version: 1.18.0
          arguments: full-release --config-file=jreleaser.template.yml -PprojectVersion=${{ env.RELEASE_VERSION }} --strict
        env:
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_SIGNING_PASSWORD }}
          JRELEASER_TOKEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_TOKEN_USERNAME }}
          JRELEASER_TOKEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN_PASSWORD }}
          JRELEASER_NEXUS_STAGING_PROFILE_ID: ${{ secrets.MAVEN_CENTRAL_STAGING_PROFILE_ID }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
